@using SSSEditor
@inherits PairListPageBase

<!DOCTYPE html>

<html>
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=8" />
    <title>SSS Editor Demo Page</title>
    <script type="text/javascript">
        @Raw(PairListModel.JQuery)

        var icons = [@Raw(Model.iconsJSON)][0];

        function getStageOrder() {
            return JSON.stringify({
                definitions: $("#pairDefinitions .stageRow").map(function () {
                    return {
                        origIndex: +$("input.defIndex", this).val(),
                        order: +$("select.stagename", this).val(),
                        icon: +$("input.iconID", this).val()
                    };
                }).get()
            });
        }

        var stage_options = "";
        @foreach (KeyValuePair<byte, string> kvpair in PairListModel.StagesByID) {
            <text>stage_options += "<option value='@kvpair.Key'>@kvpair.Value</option>";</text>
        }

        $(function () {
            $("select.stagename").html(stage_options);

            $(".stageRow").each(function (i, e) {
                var stageId = parseInt($(".stageIDDisplay", e).text(), 16);
                var iconId = parseInt($(".iconIDDisplay", e).text(), 16);
                $("img.icon", e).attr("src", "data:image/png;base64," + icons[iconId]);
                $("select.stagename", e).val(stageId);
            });

            if ("documentMode" in document) $("#documentMode").text(document.documentMode);

            $("input.iconID").change(function () {
                var iconId = +$(this).val();

                var str = iconId.toString(16);
                if (str.length == 1) str = "0" + str;

                var defClassName = $(this).parents(".stageRow")[0].className.match(/def[^ ]*/)[0];
                $("." + defClassName + " img.icon").attr("src", "data:image/png;base64," + icons[iconId]);
                $("." + defClassName + " .iconIDDisplay").text(str);
                $("." + defClassName + " input.iconID").val(iconId);
            });

            $("input.stageID, select.stagename").change(function () {
                var stageId = +$(this).val();

                var str = stageId.toString(16);
                if (str.length == 1) str = "0" + str;

                var defClassName = $(this).parents(".stageRow")[0].className.match(/def[^ ]*/)[0];
                $("." + defClassName + " .stageIDDisplay").text(str);
                $("." + defClassName + " input.stageID").val(stageId);
                $("." + defClassName + " select.stagename").val(stageId);
            });

            $("input.defIndex").change(function () {
                var defId = +$(this).val();
                var defRow = $("#pairDefinitions .stageRow").eq(defId);

                var thisRow = $(this).parents(".stageRow");

                // Untie from old first-column entry (if tied to any)
                var oldDefClassNameMatch = thisRow[0].className.match(/def[^ ]*/);
                if (oldDefClassNameMatch) thisRow.removeClass(oldDefClassNameMatch[0]);

                if (defRow.length == 0) {
                    thisRow.find("img.icon").attr("src", "");
                    thisRow.find("input.iconID").val("");
                    thisRow.find(".iconIDDisplay").text("xx");
                    thisRow.find(".stageIDDisplay").text("xx");
                    thisRow.find("input.stageID").val("");
                    thisRow.find("select.stagename").val("");
                } else {
                    thisRow.find("img.icon").attr("src", defRow.find("img.icon").attr("src"));
                    thisRow.find("input.iconID").val(defRow.find("input.iconID").val());
                    thisRow.find(".iconIDDisplay").text(defRow.find(".iconIDDisplay").text());
                    thisRow.find(".stageIDDisplay").text(defRow.find(".stageIDDisplay").text());
                    thisRow.find("input.stageID").val(defRow.find("input.stageID").val());
                    thisRow.find("select.stagename").val(defRow.find("select.stagename").val());

                    // Tie to corresponding first-column entry
                    var newDefClassName = defRow[0].className.match(/def[^ ]*/)[0];
                    thisRow.addClass(newDefClassName);
                }
            });

            $("input.up").click(function () {
                var row = $(this).parents(".stageRow");
                var defClassName = row[0].className.match(/def[^ ]*/)[0];
                var previous = row.prev();
                var previousDefClassName = previous[0].className.match(/def[^ ]*/)[0];

                if (previous.length > 0) {
                    row.insertBefore(previous);
                    if (row.parents("#pairDefinitions").length > 0) {
                        // First column
                        var previousIndex = +previous.find("input.defIndex").val();
                        var index = +row.find("input.defIndex").val();
                        $("." + defClassName + " input.defIndex").val(previousIndex);
                        $("." + previousDefClassName + " input.defIndex").val(index);
                    }
                    var previousIndexStr = previous.find(".indexDisplay").text();
                    var indexStr = row.find(".indexDisplay").text();
                    row.find(".indexDisplay").text(previousIndexStr);
                    previous.find(".indexDisplay").text(indexStr);
                }

                $(this).focus();
            });

            $("input.down").click(function () {
                var row = $(this).parents(".stageRow");
                var defClassName = row[0].className.match(/def[^ ]*/)[0];
                var next = row.next();
                var nextDefClassName = next[0].className.match(/def[^ ]*/)[0];

                if (next.length > 0) {
                    row.insertAfter(next);
                    if (row.parents("#pairDefinitions").length > 0) {
                        // First column
                        var nextIndex = +next.find("input.defIndex").val();
                        var index = +row.find("input.defIndex").val();
                        $("." + defClassName + " input.defIndex").val(nextIndex);
                        $("." + nextDefClassName + " input.defIndex").val(index);
                    }
                    var nextIndexStr = next.find(".indexDisplay").text();
                    var indexStr = row.find(".indexDisplay").text();
                    row.find(".indexDisplay").text(nextIndexStr);
                    next.find(".indexDisplay").text(indexStr);
                }

                $(this).focus();
            });
        });
    </script>
    <style type="text/css">
		html, body {
			height: 100%;
			margin: 0;
		}
	
        body {
            font-family: Arial, Helvetica, sans-serif;
            font-size: 10pt;
        }
		
		.columns {
			box-sizing: border-box;
			height: 100%;
			padding: 8px 8px 40px 8px;
		}
		
		.footer {
			position: absolute;
			bottom: 0;
			left: 0;
			
			line-height: 32px;
		}

        .column {
            width: 350px;
            display: inline-block;
            vertical-align: top;
			
            border: 1px outset white;
			
			box-sizing: border-box;
			height: 100%;
			padding-bottom: 64px;
        }

        .columnHeader {
            text-align: center;
            font-weight: bold;
			line-height: 32px;
        }

        .column > .main {
            height: 100%;
            overflow-y: scroll;
        }
		
		.column > .buttons {
			text-align: center;
			line-height: 32px;
		}

        .stageRow {
            background-color: lightgray;
            border: 1px outset white;
            overflow: auto;
            margin-bottom: 8px;
            padding: 2px;

            line-height: 26px;
        }

        .stageRow img.icon {
            float: left;
            margin-right: 2px;
        }

        .stageRow .indexDisplay {
            font-weight: bold;
        }

        .stageIDDisplay, .iconIDDisplay {
            font-family: monospace;
        }

        input.iconID, input.stageID, input.defIndex {
            width: 48px;
        }

        input.up, input.down {
            width: 22px;
            height: 22px;
        }
    </style>
</head>
<body>
    <div class="columns">
        <div class="column">
            <div class="columnHeader">Stage/Icon Pairs</div>
            <div id="pairDefinitions" class="main">
                @for (int i = 0; i < Model.pairs.Count; i++) {
                    ModelPair pair = Model.pairs[i];
                    <div class="stageRow def@(i)">
                        <img width="64" height="56" class="icon" />
                        <span class="indexDisplay">@i.</span>
                        <select class="stagename"></select>
                        <br />
                        <input class="defIndex" value="@i" disabled />
                        <input class="stageID" value="@pair.stage" type="number" />
                        <span class="stageIDDisplay">@pair.stage.ToString("X2")</span>
                        <span class="iconIDDisplay">@pair.icon.ToString("X2")</span>
                        <input class="iconID" value="@pair.icon" type="number" />
                        <input class="up" value="^" type="button" />
                        <input class="down" value="v" type="button" />
                    </div>
                }
            </div>
            <div class="buttons">
                buttons
            </div>
        </div>
        <div class="column">
            <div class="columnHeader">Page 1 / Brawl</div>
            <div id="screen1" class="main">
                @for (int i = 0; i < Model.screen1.Length; i++) {
                    int defID = Model.screen1[i];
                    ModelPair pair = Model.pairs[defID];
                    <div class="stageRow def@(defID)">
                        <img width="64" height="56" class="icon" />
                        <span class="indexDisplay">@i.</span>
                        <select class="stagename" disabled></select>
                        <br />
                        <input class="defIndex" value="@defID" />
                        <input class="stageID" value="@pair.stage" type="number" disabled />
                        <span class="stageIDDisplay">@pair.stage.ToString("X2")</span>
                        <span class="iconIDDisplay">@pair.icon.ToString("X2")</span>
                        <input class="iconID" value="@pair.icon" type="number" disabled />
                        <input class="up" value="^" type="button" />
                        <input class="down" value="v" type="button" />
                    </div>
                }
            </div>
        </div>
        <div class="column">
            <div class="columnHeader">Page 2 / Melee</div>
            <div id="screen2" class="main">
                @for (int i = 0; i < Model.screen2.Length; i++) {
                    int defID = Model.screen2[i];
                    ModelPair pair = Model.pairs[defID];
                    <div class="stageRow def@(defID)">
                        <img width="64" height="56" class="icon" />
                        <span class="indexDisplay">@i.</span>
                        <select class="stagename" disabled></select>
                        <br />
                        <input class="defIndex" value="@defID" />
                        <input class="stageID" value="@pair.stage" type="number" disabled />
                        <span class="stageIDDisplay">@pair.stage.ToString("X2")</span>
                        <span class="iconIDDisplay">@pair.icon.ToString("X2")</span>
                        <input class="iconID" value="@pair.icon" type="number" disabled />
                        <input class="up" value="^" type="button" />
                        <input class="down" value="v" type="button" />
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="footer">
        SSS Editor &mdash; using document mode: <span id="documentMode"></span>
    </div>
</body>
</html>