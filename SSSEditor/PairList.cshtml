@using SSSEditor
@inherits PairListPageBase

<!DOCTYPE html>

<html>
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=8" />
    <title>SSS Editor Demo Page</title>
    <script type="text/javascript">
        @Raw(PairListModel.JQuery)

        var icons = [@Raw(Model.iconsJSON)][0];

        function getStageOrder() {
            return JSON.stringify({
                definitions: $("#pairDefinitions .stageRow").map(function () {
                    return {
                        origIndex: +$("input.defIndex", this).val(),
                        order: +$("select.stagename", this).val(),
                        icon: +$("input.iconID", this).val()
                    };
                }).get()
            });
        }

        var stage_options = "";
        @foreach (KeyValuePair<byte, string> kvpair in PairListModel.StagesByID) {
            <text>stage_options += "<option value='@kvpair.Key'>@kvpair.Value</option>";</text>
        }

        $(function () {
            $("select.stagename").html(stage_options);

            $(".stageRow").each(function (i, e) {
                var stageId = parseInt($(".stageIDDisplay", e).text(), 16);
                var iconId = parseInt($(".iconIDDisplay", e).text(), 16);
                $("img.icon", e).attr("src", "data:image/png;base64," + icons[iconId]);
                $("select.stagename", e).val(stageId);
            });

            if ("documentMode" in document) $("#documentMode").text(document.documentMode);

            $("input.iconID").change(function () {
                var defOrigClassName = $(this).parents(".stageRow")[0].className.match(/defOrig[^ ]*/)[0];

                var iconId = +$(this).val();
                var str = iconId.toString(16);
                if (str.length == 1) str = "0" + str;
                $("." + defOrigClassName + " .iconIDDisplay").text(str);

                $("." + defOrigClassName + " img.icon").attr("src", "data:image/png;base64," + icons[iconId]);
            });

            $("input.stageID").change(function () {
                var defOrigClassName = $(this).parents(".stageRow")[0].className.match(/defOrig[^ ]*/)[0];

                var stageId = +$(this).val();
                var str = stageId.toString(16);
                if (str.length == 1) str = "0" + str;
                $("." + defOrigClassName + " .stageIDDisplay").text(str);

                $("." + defOrigClassName + " .stageRow").find("input.stageID").val(stageId);
                $("." + defOrigClassName + " select.stagename").val(stageId);
            });

            $("select.stagename").change(function () {
                var defOrigClassName = $(this).parents(".stageRow")[0].className.match(/defOrig[^ ]*/)[0];

                var stageId = +$(this).val();
                var str = stageId.toString(16);
                if (str.length == 1) str = "0" + str;
                $("." + defOrigClassName + " .stageIDDisplay").text(str);

                $("." + defOrigClassName + " .stageRow").find("input.stageID").val(stageId);
                $("." + defOrigClassName + " select.stagename").val(stageId);
            });

            $("input.up").click(function () {
                var row = $(this).parents(".stageRow");
                var previous = row.prev();

                if (previous.length > 0) {
                    var previousIndex = +previous.find("input.defIndex").val();
                    var index = +row.find("input.defIndex").val();
                    row.insertBefore(previous);
                    row.find(".indexDisplay").text(previousIndex);
                    row.find("input.defIndex").val(previousIndex);
                    previous.find(".indexDisplay").text(index);
                    previous.find("input.defIndex").val(index);
                }

                $(this).focus();
            });

            $("input.down").click(function () {
                var row = $(this).parents(".stageRow");
                var next = row.next();

                if (next.length > 0) {
                    var nextIndex = +next.find("input.defIndex").val();
                    var index = +row.find("input.defIndex").val();
                    row.insertAfter(next);
                    row.find(".indexDisplay").text(nextIndex);
                    row.find("input.defIndex").val(nextIndex);
                    next.find(".indexDisplay").text(index);
                    next.find("input.defIndex").val(index);
                }

                $(this).focus();
            });
        });
    </script>
    <style type="text/css">
        body {
            font-family: Arial, Helvetica, sans-serif;
            font-size: 10pt;
        }

        .column {
            display: inline-block;
            width: 300px;
            vertical-align: top;
        }

        .columnHeader {
            text-align: center;
            font-weight: bold;
            margin-bottom: 8px;
        }

        .stageRow {
            background-color: lightgray;
            border: 1px outset white;
            overflow: auto;
            margin-bottom: 8px;
            padding: 2px;

            line-height: 26px;
        }

        .stageRow img.icon {
            float: left;
            margin-right: 2px;
        }

        .stageRow .indexDisplay {
            font-weight: bold;
        }

        .stageIDDisplay, .iconIDDisplay {
            font-family: monospace;
        }

        input.iconID, input.stageID, input.defIndex {
            width: 48px;
        }

        input.up, input.down {
            width: 22px;
            height: 22px;
        }
    </style>
</head>
<body>
    <div class="column">
        <div class="columnHeader">Stage/Icon Pairs</div>
        <div id="pairDefinitions">
            @for (int i = 0; i < Model.pairs.Count; i++) {
                ModelPair pair = Model.pairs[i];
                <div class="stageRow defOrig@(i)">
                    <img width="64" height="56" class="icon" />
                    <span class="indexDisplay">@i.</span>
                    <select class="stagename"></select>
                    <br />
                    <input class="defIndex" value="@i" disabled />
                    <!--<input class="stageID" value="@pair.stage" type="number" />-->
                    <span class="stageIDDisplay">@pair.stage.ToString("X2")</span>
                    <span class="iconIDDisplay">@pair.icon.ToString("X2")</span>
                    <input class="iconID" value="@pair.icon" type="number" />
                    <input class="up" value="^" type="button" />
                    <input class="down" value="v" type="button" />
                </div>
            }
        </div>
    </div>
    <div class="column">
        <div class="columnHeader">Page 1 / Brawl</div>
        <div id="screen1">
            @for (int i = 0; i < Model.screen1.Length; i++) {
                int defID = Model.screen1[i];
                ModelPair pair = Model.pairs[defID];
                <div class="stageRow defOrig@(i)">
                    <img width="64" height="56" class="icon" />
                    <span class="indexDisplay">@i.</span>
                    <select class="stagename" disabled></select>
                    <br />
                    <input class="defIndex" value="@i" />
                    <!--<input class="stageID" value="@pair.stage" type="number" />-->
                    <span class="stageIDDisplay">@pair.stage.ToString("X2")</span>
                    <span class="iconIDDisplay">@pair.icon.ToString("X2")</span>
                    <input class="iconID" value="@pair.icon" type="number" disabled />
                    <input class="up" value="^" type="button" />
                    <input class="down" value="v" type="button" />
                </div>
            }
        </div>
    </div>
    <p>
        Document mode: <span id="documentMode"></span>
    </p>
</body>
</html>